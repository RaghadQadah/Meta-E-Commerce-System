{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentSegment from \"./ExponentSegment\";\nexport function initialize(options) {\n  if (!ExponentSegment.initialize) {\n    throw new UnavailabilityError('expo-analytics-segment', 'initialize');\n  }\n\n  var platformWriteKey = Platform.select({\n    ios: options.iosWriteKey,\n    android: options.androidWriteKey\n  });\n\n  if (platformWriteKey) {\n    ExponentSegment.initialize(platformWriteKey);\n  } else {\n    throw new Error('You must provide a platform-specific write key to initialize Segment.');\n  }\n}\nexport function identify(userId) {\n  if (!ExponentSegment.identify) {\n    throw new UnavailabilityError('expo-analytics-segment', 'identify');\n  }\n\n  ExponentSegment.identify(userId);\n}\nexport function identifyWithTraits(userId, traits) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!ExponentSegment.identifyWithTraits) {\n    throw new UnavailabilityError('expo-analytics-segment', 'identifyWithTraits');\n  }\n\n  ExponentSegment.identifyWithTraits(userId, traits, options);\n}\nexport function group(groupId) {\n  if (!ExponentSegment.group) {\n    throw new UnavailabilityError('expo-analytics-segment', 'group');\n  }\n\n  ExponentSegment.group(groupId);\n}\nexport function groupWithTraits(groupId, traits) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!ExponentSegment.groupWithTraits) {\n    throw new UnavailabilityError('expo-analytics-segment', 'groupWithTraits');\n  }\n\n  ExponentSegment.groupWithTraits(groupId, traits, options);\n}\nexport function alias(newId) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function alias$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n\n          if (ExponentSegment.alias) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-analytics-segment', 'alias');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentSegment.alias(newId, options));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function reset() {\n  if (!ExponentSegment.reset) {\n    throw new UnavailabilityError('expo-analytics-segment', 'reset');\n  }\n\n  ExponentSegment.reset();\n}\nexport function track(event) {\n  if (!ExponentSegment.track) {\n    throw new UnavailabilityError('expo-analytics-segment', 'track');\n  }\n\n  ExponentSegment.track(event);\n}\nexport function trackWithProperties(event, properties) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!ExponentSegment.trackWithProperties) {\n    throw new UnavailabilityError('expo-analytics-segment', 'trackWithProperties');\n  }\n\n  ExponentSegment.trackWithProperties(event, properties, options);\n}\nexport function screen(screenName) {\n  if (!ExponentSegment.screen) {\n    throw new UnavailabilityError('expo-analytics-segment', 'screen');\n  }\n\n  ExponentSegment.screen(screenName);\n}\nexport function screenWithProperties(screenName, properties) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!ExponentSegment.screenWithProperties) {\n    throw new UnavailabilityError('expo-analytics-segment', 'screenWithProperties');\n  }\n\n  ExponentSegment.screenWithProperties(screenName, properties, options);\n}\nexport function flush() {\n  if (!ExponentSegment.flush) {\n    throw new UnavailabilityError('expo-analytics-segment', 'flush');\n  }\n\n  ExponentSegment.flush();\n}\nexport function getEnabledAsync() {\n  var isEnabledNumber;\n  return _regeneratorRuntime.async(function getEnabledAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentSegment.getEnabledAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-analytics-segment', 'getEnabledAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExponentSegment.getEnabledAsync());\n\n        case 4:\n          isEnabledNumber = _context2.sent;\n          return _context2.abrupt(\"return\", !!isEnabledNumber);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setEnabledAsync(enabled) {\n  return _regeneratorRuntime.async(function setEnabledAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentSegment.setEnabledAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-analytics-segment', 'setEnabledAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExponentSegment.setEnabledAsync(enabled));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Segment.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExponentSegment from './ExponentSegment';\n\n// @needsAudit\nexport type InitializeOptions = {\n  /**\n   * Write key for Android source.\n   */\n  androidWriteKey?: string;\n  /**\n   * Write key for iOS source.\n   */\n  iosWriteKey?: string;\n};\n\nexport type CommonOptions = Record<string, any> | null;\n\n// @needsAudit\n/**\n * Segment requires separate write keys for iOS and Android. You will need to log in to Segment\n * to receive these keys: [https://segment.com/docs/guides/setup/how-do-i-find-my-write-key/](https://segment.com/docs/guides/setup/how-do-i-find-my-write-key/)\n *\n * @param options An [`InitializeOptions`](#initializeoptions) object.\n */\nexport function initialize(options: InitializeOptions): void {\n  if (!ExponentSegment.initialize) {\n    throw new UnavailabilityError('expo-analytics-segment', 'initialize');\n  }\n  const platformWriteKey = Platform.select({\n    ios: options.iosWriteKey,\n    android: options.androidWriteKey,\n  });\n  if (platformWriteKey) {\n    ExponentSegment.initialize(platformWriteKey);\n  } else {\n    throw new Error('You must provide a platform-specific write key to initialize Segment.');\n  }\n}\n\n// @needsAudit\n/**\n * Associates the current user with a user ID. Call this after calling [`Segment.initialize()`](#initialize)\n * but before other segment calls. See [Segment Identify docs](https://segment.com/docs/spec/identify/).\n * @param userId User ID for the current user.\n */\nexport function identify(userId: string): void {\n  if (!ExponentSegment.identify) {\n    throw new UnavailabilityError('expo-analytics-segment', 'identify');\n  }\n  ExponentSegment.identify(userId);\n}\n\n// @needsAudit @docsMissing\n/**\n * @param userId User ID for the current user.\n * @param traits A map of custom properties.\n * @param options Map that can include any of [these common fields](https://segment.com/docs/connections/spec/common/).\n * Defaults to `null`.\n */\nexport function identifyWithTraits(\n  userId: string,\n  traits: Record<string, any>,\n  options: CommonOptions = null\n): void {\n  if (!ExponentSegment.identifyWithTraits) {\n    throw new UnavailabilityError('expo-analytics-segment', 'identifyWithTraits');\n  }\n  ExponentSegment.identifyWithTraits(userId, traits, options);\n}\n\n// @needsAudit\n/**\n * Associate the user with a group. See [Segment Group docs](https://segment.com/docs/spec/group/).\n *\n * @param groupId ID of the group.\n */\nexport function group(groupId: string): void {\n  if (!ExponentSegment.group) {\n    throw new UnavailabilityError('expo-analytics-segment', 'group');\n  }\n  ExponentSegment.group(groupId);\n}\n\n// @needsAudit\n/**\n * Associate the user with a group with traits. See [Segment Group docs](https://segment.com/docs/spec/group/).\n *\n * @param groupId ID of the group.\n * @param traits Free-form dictionary of traits of the group.\n * @param options A map that can include any of [these common fields](https://segment.com/docs/connections/spec/common/).\n * Defaults to `null`.\n */\nexport function groupWithTraits(\n  groupId: string,\n  traits: Record<string, any>,\n  options: CommonOptions = null\n): void {\n  if (!ExponentSegment.groupWithTraits) {\n    throw new UnavailabilityError('expo-analytics-segment', 'groupWithTraits');\n  }\n  ExponentSegment.groupWithTraits(groupId, traits, options);\n}\n\n// @needsAudit\n/**\n * Associate current identity with a new identifier. See [Segment Alias docs](https://segment.com/docs/spec/alias/).\n *\n * @param newId Identifier to associate with.\n * @param options An extra dictionary with options for the call, [see here](https://segment.com/docs/connections/spec/common/)\n * for possible configuration options. An example options object would be:\n * ```json\n * {\n *   \"integrations\": {\n *     \"Sentry\": {\n *       \"enabled\": true\n *      }\n *   },\n *   \"context\": {\n *     \"ip\": \"0.0.0.0\"\n *   }\n * }\n * ```\n *\n * @return A `Promise` which fulfils witch a `boolean` indicating whether the method has been\n * executed on the underlying `Segment` instance or not.\n */\nexport async function alias(newId: string, options: CommonOptions = null): Promise<boolean> {\n  if (!ExponentSegment.alias) {\n    throw new UnavailabilityError('expo-analytics-segment', 'alias');\n  }\n  return await ExponentSegment.alias(newId, options);\n}\n\n// @needsAudit\n/**\n * Clears the current user. See [https://segment.com/docs/sources/mobile/ios/#reset](https://segment.com/docs/sources/mobile/ios/#reset).\n */\nexport function reset(): void {\n  if (!ExponentSegment.reset) {\n    throw new UnavailabilityError('expo-analytics-segment', 'reset');\n  }\n  ExponentSegment.reset();\n}\n\n// @needsAudit\n/**\n * Log an event to Segment. See [Segment Track docs](https://segment.com/docs/spec/track/).\n *\n * @param event The event name.\n */\nexport function track(event: string): void {\n  if (!ExponentSegment.track) {\n    throw new UnavailabilityError('expo-analytics-segment', 'track');\n  }\n  ExponentSegment.track(event);\n}\n\n// @needsAudit\n/**\n * Log an event to Segment with custom properties. See [Segment Track docs](https://segment.com/docs/spec/track/).\n *\n * @param event The event name.\n * @param properties A map of custom properties.\n * @param options A map that can include any of [these common fields](https://segment.com/docs/connections/spec/common/).\n * Defaults to `null`.\n */\nexport function trackWithProperties(\n  event: string,\n  properties: Record<string, any>,\n  options: CommonOptions = null\n): void {\n  if (!ExponentSegment.trackWithProperties) {\n    throw new UnavailabilityError('expo-analytics-segment', 'trackWithProperties');\n  }\n  ExponentSegment.trackWithProperties(event, properties, options);\n}\n\n// @needsAudit\n/**\n * Record that a user has seen a screen to Segment. See [Segment Screen docs](https://segment.com/docs/spec/screen/).\n *\n * @param screenName Name of the screen.\n */\nexport function screen(screenName: string): void {\n  if (!ExponentSegment.screen) {\n    throw new UnavailabilityError('expo-analytics-segment', 'screen');\n  }\n  ExponentSegment.screen(screenName);\n}\n\n// @needsAudit\n/**\n * Record that a user has seen a screen to Segment with custom properties. See [Segment Screen docs](https://segment.com/docs/spec/screen/).\n *\n * @param screenName Name of the screen.\n * @param properties A map of custom properties.\n * @param options A map that can include any of [these common fields](https://segment.com/docs/connections/spec/common/).\n * Defaults to `null`.\n */\nexport function screenWithProperties(\n  screenName: string,\n  properties: Record<string, any>,\n  options: CommonOptions = null\n): void {\n  if (!ExponentSegment.screenWithProperties) {\n    throw new UnavailabilityError('expo-analytics-segment', 'screenWithProperties');\n  }\n  ExponentSegment.screenWithProperties(screenName, properties, options);\n}\n\n// @needsAudit\n/**\n * Manually flush the event queue. You shouldn't need to call this in most cases.\n */\nexport function flush(): void {\n  if (!ExponentSegment.flush) {\n    throw new UnavailabilityError('expo-analytics-segment', 'flush');\n  }\n  ExponentSegment.flush();\n}\n\n// @missingDocs\nexport async function getEnabledAsync(): Promise<boolean> {\n  if (!ExponentSegment.getEnabledAsync) {\n    throw new UnavailabilityError('expo-analytics-segment', 'getEnabledAsync');\n  }\n  const isEnabledNumber = await ExponentSegment.getEnabledAsync();\n  return !!isEnabledNumber;\n}\n\n// @missingDocs\nexport async function setEnabledAsync(enabled: boolean): Promise<void> {\n  if (!ExponentSegment.setEnabledAsync) {\n    throw new UnavailabilityError('expo-analytics-segment', 'setEnabledAsync');\n  }\n  await ExponentSegment.setEnabledAsync(enabled);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}