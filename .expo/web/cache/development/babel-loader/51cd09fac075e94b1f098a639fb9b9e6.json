{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  products: [],\n  total: 0\n};\n\nvar Reducer = function Reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      var aNewProducts = [].concat(_toConsumableArray(state.products), [action.payload]);\n      var aNewTotal = 0;\n      var newArray = [];\n      aNewProducts.forEach(function (obj) {\n        if (!newArray.some(function (o) {\n          return o.key === obj.key;\n        })) {\n          newArray.push(_objectSpread({}, obj));\n        }\n      });\n      newArray.forEach(function (product) {\n        if (product.key == action.payload.key) {\n          product.quantity += 1;\n        }\n\n        aNewTotal += product.price * product.quantity;\n      });\n      return {\n        products: newArray,\n        total: aNewTotal\n      };\n\n    case 'REMOVE_FROM_CART':\n      var rNewProducts = state.products.filter(function (p) {\n        return p.key !== action.payload.key;\n      });\n      var rNewTotal = 0;\n      rNewProducts.forEach(function (product) {\n        rNewTotal += product.price * product.quantity;\n      });\n      return {\n        products: rNewProducts,\n        total: rNewTotal\n      };\n\n    case 'Plus_Quantity':\n      var aNewProducts1 = [].concat(_toConsumableArray(state.products), [action.payload]);\n      var aNewTotal1 = 0;\n      var newArray1 = [];\n      aNewProducts1.forEach(function (obj) {\n        if (!newArray1.some(function (o) {\n          return o.key === obj.key;\n        })) {\n          newArray1.push(_objectSpread({}, obj));\n        }\n      });\n      newArray1.forEach(function (product) {\n        if (product.key == action.payload.key) {\n          product.quantity += 1;\n        }\n\n        aNewTotal1 += product.price * product.quantity;\n      });\n      return {\n        products: newArray1,\n        total: aNewTotal1\n      };\n\n    case 'Minus_Quantity':\n      if (action.payload.quantity > 1) {\n        var aNewProducts2 = [].concat(_toConsumableArray(state.products), [action.payload]);\n        var aNewTotal2 = 0;\n        var newArray2 = [];\n        aNewProducts2.forEach(function (obj) {\n          if (!newArray2.some(function (o) {\n            return o.key === obj.key;\n          })) {\n            newArray2.push(_objectSpread({}, obj));\n          }\n        });\n        newArray2.forEach(function (product) {\n          if (product.key == action.payload.key) {\n            product.quantity -= 1;\n          }\n\n          aNewTotal2 += product.price * product.quantity;\n        });\n        return {\n          products: newArray2,\n          total: aNewTotal2\n        };\n      }\n\n  }\n\n  return state;\n};\n\nexport default Reducer;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/NewReact/E-COM/Meta-E-Commerce-System-with-Payment-and-Delivery/reducers/Reducer.js"],"names":["initialState","products","total","Reducer","state","action","type","aNewProducts","payload","aNewTotal","newArray","forEach","obj","some","o","key","push","product","quantity","price","rNewProducts","filter","p","rNewTotal","aNewProducts1","aNewTotal1","newArray1","aNewProducts2","aNewTotal2","newArray2"],"mappings":"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","sourcesContent":["// const initialState = {\r\n//     products: [],\r\n//     total: 0\r\n// }\r\n\r\n\r\n// const Reducer = (state = initialState, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case 'ADD_TO_CART':\r\n//             let aNewProducts = [...state.products, action.payload];\r\n//             let aNewTotal = 0;\r\n//             const newArray = [];\r\n\r\n//             aNewProducts.forEach(obj => {\r\n//                 if (!(newArray.some(o => (o.id === obj.id)&&(o.provider === obj.provider)   ))) {\r\n//                     newArray.push({ ...obj })\r\n                \r\n//             }\r\n//             });\r\n\r\n//             newArray.forEach((product) => {\r\n           \r\n//                 if((product.id==action.payload.id)){\r\n//                     if((product.provider==action.payload.provider))\r\n//                      product.quantity += 1\r\n//             }\r\n//                 aNewTotal += (product.price * product.quantity)\r\n              \r\n//             });\r\n\r\n//             return {\r\n//                 products: newArray,\r\n//                 total: aNewTotal\r\n//             };\r\n\r\n//         case 'REMOVE_FROM_CART':\r\n        \r\n//             const rNewProducts = state.products.filter((p) =>\r\n//                 (p.id != action.payload.id) \r\n//                  && (p.provider != action.payload.provider)\r\n//             );\r\n\r\n\r\n//             let rNewTotal = 0;\r\n//             rNewProducts.forEach((product) => {\r\n//                 rNewTotal += (product.price * product.quantity)\r\n               \r\n//             });\r\n            \r\n//             return {\r\n//                 products: rNewProducts,\r\n//                 total: rNewTotal\r\n//             };\r\n\r\n\r\n//         case 'Plus_Quantity':\r\n            \r\n//             let aNewProducts1 = [...state.products, action.payload];\r\n//             let aNewTotal1 = 0;\r\n\r\n//             const newArray1 = [];\r\n//             aNewProducts1.forEach(obj => {\r\n//                 if(!(newArray1.some(o => (o.id === obj.id)&&(o.provider === obj.provider)    ))) {\r\n                 \r\n//                     newArray1.push({ ...obj })\r\n//                 }\r\n\r\n//             });\r\n\r\n//             newArray1.forEach((product) => {\r\n            \r\n//                 if((product.id==action.payload.id)){\r\n//                     if((product.provider==action.payload.provider))\r\n//                     product.quantity += 1\r\n//             }\r\n//                 aNewTotal1 += (product.price * product.quantity)\r\n               \r\n//             });\r\n\r\n//             return {\r\n//                 products: newArray1,\r\n//                 total: aNewTotal1\r\n//             };\r\n        \r\n//         case 'Minus_Quantity':\r\n//             if(action.payload.quantity>1){\r\n//             let aNewProducts2 = [...state.products, action.payload];\r\n//             let aNewTotal2 = 0;\r\n\r\n//             const newArray2 = [];\r\n//             aNewProducts2.forEach(obj => {\r\n//                 if (!(newArray2.some(o => (o.id === obj.id)&&(o.provider === obj.provider)   ))) {\r\n                   \r\n//                     newArray2.push({ ...obj })\r\n//                 }\r\n\r\n//             });\r\n\r\n//             newArray2.forEach((product) => {\r\n               \r\n//                 if((product.id==action.payload.id)&&(product.provider==action.payload.provider)){\r\n//                     product.quantity -= 1\r\n//             }\r\n//                 aNewTotal2 += (product.price * product.quantity)\r\n             \r\n//             });\r\n\r\n//             return {\r\n//                 products: newArray2,\r\n//                 total: aNewTotal2\r\n//             };\r\n//         }\r\n\r\n//     }\r\n\r\n//     return state\r\n// }\r\n\r\n// export default Reducer\r\n\r\nconst initialState = {\r\n    products: [],\r\n    total: 0\r\n}\r\n\r\n\r\nconst Reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD_TO_CART':\r\n            let aNewProducts = [...state.products, action.payload];\r\n            let aNewTotal = 0;\r\n\r\n            const newArray = [];\r\n            aNewProducts.forEach(obj => {\r\n                if (!newArray.some(o => o.key === obj.key)) {\r\n                    newArray.push({ ...obj })\r\n                }\r\n\r\n            });\r\n\r\n            newArray.forEach((product) => {\r\n                // aNewTotal += product.price\r\n                if(product.key==action.payload.key){\r\n                product.quantity += 1\r\n                }\r\n                aNewTotal += (product.price * product.quantity)\r\n                // aNewTotal += product.price\r\n            });\r\n\r\n            return {\r\n                products: newArray,\r\n                total: aNewTotal\r\n            };\r\n\r\n        case 'REMOVE_FROM_CART':\r\n            // return state.filter(cartItem => cartItem.id !== action.payload.id)\r\n            const rNewProducts = state.products.filter((p) =>\r\n                p.key !== action.payload.key\r\n            );\r\n            let rNewTotal = 0;\r\n            rNewProducts.forEach((product) => {\r\n                rNewTotal += (product.price * product.quantity)\r\n               // product.quantity += 1\r\n            });\r\n            // rNewProducts.quantity = 0\r\n            return {\r\n                products: rNewProducts,\r\n                total: rNewTotal\r\n            };\r\n\r\n\r\n        case 'Plus_Quantity':\r\n            \r\n            let aNewProducts1 = [...state.products, action.payload];\r\n            let aNewTotal1 = 0;\r\n\r\n            const newArray1 = [];\r\n            aNewProducts1.forEach(obj => {\r\n                if (!newArray1.some(o => o.key === obj.key)) {\r\n                    newArray1.push({ ...obj })\r\n                }\r\n\r\n            });\r\n\r\n            newArray1.forEach((product) => {\r\n                // aNewTotal += product.price\r\n                if(product.key==action.payload.key){\r\n                    product.quantity += 1\r\n            }\r\n                aNewTotal1 += (product.price * product.quantity)\r\n                // aNewTotal += product.price\r\n            });\r\n\r\n            return {\r\n                products: newArray1,\r\n                total: aNewTotal1\r\n            };\r\n        \r\n        case 'Minus_Quantity':\r\n            if(action.payload.quantity>1){\r\n            let aNewProducts2 = [...state.products, action.payload];\r\n            let aNewTotal2 = 0;\r\n\r\n            const newArray2 = [];\r\n            aNewProducts2.forEach(obj => {\r\n                if (!newArray2.some(o => o.key === obj.key)) {\r\n                    newArray2.push({ ...obj })\r\n                }\r\n\r\n            });\r\n\r\n            newArray2.forEach((product) => {\r\n                // aNewTotal += product.price\r\n                if(product.key==action.payload.key){\r\n                    product.quantity -= 1\r\n            }\r\n                aNewTotal2 += (product.price * product.quantity)\r\n                // aNewTotal += product.price\r\n            });\r\n\r\n            return {\r\n                products: newArray2,\r\n                total: aNewTotal2\r\n            };\r\n        }\r\n\r\n    }\r\n\r\n    return state\r\n}\r\n\r\nexport default Reducer\r\n\r\n"]},"metadata":{},"sourceType":"module"}