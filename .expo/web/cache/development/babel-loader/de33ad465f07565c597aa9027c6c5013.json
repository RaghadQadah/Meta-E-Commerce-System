{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BorderlessButton from \"./BorderlessButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  var _super = _createSuper(TouchableItem);\n\n  function TouchableItem() {\n    _classCallCheck(this, TouchableItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n        var _this$props = this.props,\n            style = _this$props.style,\n            rest = _objectWithoutProperties(_this$props, _excluded);\n\n        return _jsx(TouchableNativeFeedback, _objectSpread(_objectSpread({}, rest), {}, {\n          style: null,\n          background: TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),\n          children: _jsx(View, {\n            style: style,\n            children: React.Children.only(this.props.children)\n          })\n        }));\n      } else if (Platform.OS === 'ios') {\n        return _jsx(BorderlessButton, _objectSpread(_objectSpread({\n          hitSlop: {\n            top: 10,\n            bottom: 10,\n            right: 10,\n            left: 10\n          },\n          disallowInterruption: true\n        }, this.props), {}, {\n          children: this.props.children\n        }));\n      } else {\n        return _jsx(TouchableOpacity, _objectSpread(_objectSpread({}, this.props), {}, {\n          children: this.props.children\n        }));\n      }\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nTouchableItem.defaultProps = {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n};\nexport { TouchableItem as default };","map":{"version":3,"sources":["C:/Users/Dell/Desktop/NewReact/E-COM/Meta-E-Commerce-System-with-Payment-and-Delivery/node_modules/react-navigation/node_modules/react-navigation-stack/dist/views/TouchableItem.js"],"names":["React","BorderlessButton","ANDROID_VERSION_LOLLIPOP","TouchableItem","Platform","OS","Version","props","style","rest","TouchableNativeFeedback","Ripple","pressColor","borderless","Children","only","children","top","bottom","right","left","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AASA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAGA,OAAOC,gBAAP;;AAEA,IAAMC,wBAAwB,GAAG,EAAjC;;IAEqBC,a;;;;;;;;;;;;;WAMnB,kBAAS;AASP,UAAIC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoBJ,wBAArD,EAA+E;AAC7E,0BAA2B,KAAKK,KAAhC;AAAA,YAAQC,KAAR,eAAQA,KAAR;AAAA,YAAkBC,IAAlB;;AACA,eAAO,KAAC,uBAAD,kCAA6BA,IAA7B;AAAmC,UAAA,KAAK,EAAE,IAA1C;AAAgD,UAAA,UAAU,EAAEC,uBAAuB,CAACC,MAAxB,CAA+B,KAAKJ,KAAL,CAAWK,UAA1C,EAAsD,KAAKL,KAAL,CAAWM,UAAjE,CAA5D;AAAA,oBACH,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEL,KAAb;AAAA,sBAAqBR,KAAK,CAACc,QAAN,CAAeC,IAAf,CAAoB,KAAKR,KAAL,CAAWS,QAA/B;AAArB;AADG,WAAP;AAGD,OALD,MAKO,IAAIZ,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AAChC,eAAO,KAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE;AAAEY,YAAAA,GAAG,EAAE,EAAP;AAAWC,YAAAA,MAAM,EAAE,EAAnB;AAAuBC,YAAAA,KAAK,EAAE,EAA9B;AAAkCC,YAAAA,IAAI,EAAE;AAAxC,WAA3B;AAAyE,UAAA,oBAAoB;AAA7F,WAAkG,KAAKb,KAAvG;AAAA,oBACF,KAAKA,KAAL,CAAWS;AADT,WAAP;AAGD,OAJM,MAIA;AACL,eAAO,KAAC,gBAAD,kCAAsB,KAAKT,KAA3B;AAAA,oBACF,KAAKA,KAAL,CAAWS;AADT,WAAP;AAGD;AACF;;;;EA7BwChB,KAAK,CAACqB,S;;AAA5BlB,a,CACZmB,Y,GAAe;AACpBT,EAAAA,UAAU,EAAE,KADQ;AAEpBD,EAAAA,UAAU,EAAE;AAFQ,C;SADHT,a","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport React from 'react';\nimport { Platform, TouchableNativeFeedback, TouchableOpacity, View } from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)'\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n      const { style, ...rest } = this.props;\n      return <TouchableNativeFeedback {...rest} style={null} background={TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)}>\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>;\n    } else if (Platform.OS === 'ios') {\n      return <BorderlessButton hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }} disallowInterruption {...this.props}>\n          {this.props.children}\n        </BorderlessButton>;\n    } else {\n      return <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}