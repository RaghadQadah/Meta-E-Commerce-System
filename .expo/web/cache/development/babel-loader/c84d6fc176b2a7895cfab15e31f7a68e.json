{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Expo from 'expo';\nimport * as Google from 'expo-google-app-auth';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      console.log('Google Auth Response', googleUser);\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function (result) {\n            console.log('user signed in ');\n\n            if (result.additionalUserInfo.isNewUser) {\n              firebase.database().ref('/users/' + result.user.uid).set({\n                gmail: result.user.email,\n                profile_picture: result.additionalUserInfo.profile.picture,\n                first_name: result.additionalUserInfo.profile.given_name,\n                last_name: result.additionalUserInfo.profile.family_name,\n                created_at: Date.now()\n              }).then(function (snapshot) {});\n            } else {\n              firebase.database().ref('/users/' + result.user.uid).update({\n                last_logged_in: Date.now()\n              });\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n          });\n        } else {\n          console.log('User already signed-in Firebase.');\n        }\n      }.bind(_assertThisInitialized(_this)));\n    };\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"call signInWithGoogleAsync\");\n              _context.prev = 1;\n              console.log(\"try signInWithGoogleAsync\");\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                behavior: 'web',\n                iosClientId: '731109863491-77g059lagdgbkmpoph4497904en22u2o.apps.googleusercontent.com',\n                scopes: ['profile', 'email']\n              }));\n\n            case 5:\n              result = _context.sent;\n              console.log(\"try result.type : \" + result.type);\n\n              if (!(result.type === 'success')) {\n                _context.next = 12;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 12:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 13:\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(\"errer : \" + _context.t0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 15]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Button, {\n          title: \"Sign In With Google\",\n          onPress: function onPress() {\n            return _this2.signInWithGoogleAsync();\n          }\n        })\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Dell/Desktop/REACT/secondTest/screens/LoginScreen.js"],"names":["React","Component","Expo","Google","firebase","LoginScreen","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInAndRetrieveDataWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","first_name","given_name","last_name","family_name","created_at","Date","now","snapshot","update","last_logged_in","catch","error","errorCode","code","errorMessage","message","bind","signInWithGoogleAsync","logInAsync","behavior","iosClientId","scopes","type","cancelled","styles","container","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Text, StyleSheet, Button } from 'react-native';\r\nimport * as Expo from 'expo';\r\n// import { Google } from \"expo\"; \r\nimport * as Google from 'expo-google-app-auth';\r\nimport firebase from \"firebase/compat/app\"\r\nimport \"firebase/compat/auth\"\r\nimport \"firebase/compat/firestore\"\r\n\r\n\r\nclass LoginScreen extends Component {\r\n  isUserEqual = (googleUser, firebaseUser) => {\r\n    if (firebaseUser) {\r\n      var providerData = firebaseUser.providerData;\r\n      for (var i = 0; i < providerData.length; i++) {\r\n        if (\r\n          providerData[i].providerId ===\r\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n          providerData[i].uid === googleUser.getBasicProfile().getId()\r\n        ) {\r\n          // We don't need to reauth the Firebase connection.\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  onSignIn = googleUser => {\r\n    console.log('Google Auth Response', googleUser);\r\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n    var unsubscribe = firebase.auth().onAuthStateChanged(\r\n      function(firebaseUser) {\r\n        unsubscribe();\r\n        // Check if we are already signed-in Firebase with the correct user.\r\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\r\n          // Build Firebase credential with the Google ID token.\r\n          var credential = firebase.auth.GoogleAuthProvider.credential(\r\n            googleUser.idToken,\r\n            googleUser.accessToken\r\n          );\r\n          // Sign in with credential from the Google user.\r\n          firebase\r\n            .auth()\r\n            .signInAndRetrieveDataWithCredential(credential)\r\n            .then(function(result) {\r\n              console.log('user signed in ');\r\n              if (result.additionalUserInfo.isNewUser) {\r\n                firebase\r\n                  .database()\r\n                  .ref('/users/' + result.user.uid)\r\n                  .set({\r\n                    gmail: result.user.email,\r\n                    profile_picture: result.additionalUserInfo.profile.picture,\r\n                    first_name: result.additionalUserInfo.profile.given_name,\r\n                    last_name: result.additionalUserInfo.profile.family_name,\r\n                    created_at: Date.now()\r\n                  })\r\n                  .then(function(snapshot) {\r\n                    // console.log('Snapshot', snapshot);\r\n                  });\r\n              } else {\r\n                firebase\r\n                  .database()\r\n                  .ref('/users/' + result.user.uid)\r\n                  .update({\r\n                    last_logged_in: Date.now()\r\n                  });\r\n              }\r\n            })\r\n            .catch(function(error) {\r\n              // Handle Errors here.\r\n              var errorCode = error.code;\r\n              var errorMessage = error.message;\r\n              // The email of the user's account used.\r\n              var email = error.email;\r\n              // The firebase.auth.AuthCredential type that was used.\r\n              var credential = error.credential;\r\n              // ...\r\n            });\r\n        } else {\r\n          console.log('User already signed-in Firebase.');\r\n        }\r\n      }.bind(this)\r\n    );\r\n  };\r\n  signInWithGoogleAsync = async () => {\r\n\t  console.log(\"call signInWithGoogleAsync\");\r\n    try {\r\n\t  console.log(\"try signInWithGoogleAsync\");\r\n    ///const result = await Google.logInAsync\r\n      const result = await Google.logInAsync({\r\n        // androidClientId: YOUR_CLIENT_ID_HERE,\r\n        behavior: 'web',\r\n        //androidClientId: '418440959152-ensau7c7d5p4klob8gpt809v2s3sq63c.apps.googleusercontent.com',\r\n        iosClientId: '731109863491-77g059lagdgbkmpoph4497904en22u2o.apps.googleusercontent.com', //enter ios client id\r\n        scopes: ['profile', 'email']\r\n      });\r\n\r\n\t  console.log(\"try result.type : \"+result.type);\r\n      if (result.type === 'success') {\r\n        this.onSignIn(result);\r\n        return result.accessToken;\r\n      } else {\r\n        return { cancelled: true };\r\n      }\r\n    } catch (e) {\r\n\t  console.log(\"errer : \"+e);\r\n      return { error: true };\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Button\r\n          title=\"Sign In With Google\"\r\n          onPress={() => this.signInWithGoogleAsync()}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}